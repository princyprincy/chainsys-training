--1. BANKING MANAGEMENT SYSTEM. Write a PL/SQL block to CONVERT THE SALARY ACCOUNT TYPE TO SAVINGS ACCOUNT FOR THE GIVEN CUSTOMER ID.
BEGIN
    UPDATE ACCOUNT_INFO_2611
    SET account_type='SAVINGS'
    WHERE account_type='SALARY'AND CUSTOMER_ID='&ID';
END;

BEGIN
    UPDATE ACCOUNT_INFO_2611
    SET account_type='SALARY'
    WHERE  CUSTOMER_ID='&ID' AND account_type='SAVINGS';
END;

select * from account_info_2611;


--2. BMS - TO CHANGE THE IFSC OF  ICICI OF TNAGAR
BEGIN
    UPDATE BANK_INFO_2611
    SET IFSC_CODE = 'ICITN0456'
    WHERE BRANCH_NAME = 'TNAGAR'
    AND BANK_NAME='ICICI';
    IF SQL%FOUND THEN
        DBMS_OUTPUT.PUT_LINE('RECORD UPDATED');
    ELSE
        DBMS_OUTPUT.PUT_LINE('RECORD NOT FOUND');
    END IF;
END;


--3. WRITE A BLOCK TO INITIATE FUND TRANSFER FOR USER TO BENEFICIARY USER. 
CREATE or replace PROCEDURE fund_transfer
(
    from_acc account_info_2611.ACCOUNT_NO%TYPE,
    to_acc account_info_2611.ACCOUNT_NO%TYPE,
    amount account_info_2611.INITIAL_DEPOSIT%TYPE
) IS
    AMOUNT1 account_info_2611.INITIAL_DEPOSIT%TYPE;
BEGIN
        SELECT INITIAL_DEPOSIT INTO AMOUNT1 FROM account_info_2611 WHERE ACCOUNT_NO=from_acc;
        IF(AMOUNT1>amount)THEN
--      DEBIT
            UPDATE account_info_2611 SET INITIAL_DEPOSIT=INITIAL_DEPOSIT-AMOUNT WHERE ACCOUNT_NO=from_acc;
--        CREDIT
            UPDATE account_info_2611 SET INITIAL_DEPOSIT=INITIAL_DEPOSIT+AMOUNT WHERE ACCOUNT_NO=to_acc;
        ELSE
             DBMS_OUTPUT.PUT_LINE('INSUFFICIENT BALANCE');
        END IF;
END;

EXECUTE fund_transfer('1234567898765432','1234567898765434','500');
EXECUTE fund_transfer('1234567898765433','1234567898765435','500');

select * from account_info_2611;


--4. WRITE A BLOCK WHO AVAILS DISCOUNT BASED ON TRANSACTION ON SAME BANKING TRANSACTIONS
CREATE or replace PROCEDURE fund_transfe
(
    from_acc account_info_2611.ACCOUNT_NO%TYPE,
    to_acc account_info_2611.ACCOUNT_NO%TYPE,
    amount account_info_2611.INITIAL_DEPOSIT%TYPE
) IS
    IFSC1 BANK_INFO_2611.BANK_NAME%TYPE;
    IFSC2 BANK_INFO_2611.BANK_NAME%TYPE;
BEGIN
--      DEBIT
        UPDATE account_info_2611 SET INITIAL_DEPOSIT=INITIAL_DEPOSIT-AMOUNT WHERE ACCOUNT_NO=from_acc;
--        CREDIT
        UPDATE account_info_2611 SET INITIAL_DEPOSIT=INITIAL_DEPOSIT+AMOUNT WHERE ACCOUNT_NO=to_acc;
        
        SELECT BANK_NAME INTO IFSC1 FROM BANK_INFO_2611 WHERE IFSC_CODE IN( SELECT IFSC_CODE FROM account_info_2611 WHERE ACCOUNT_NO=from_acc);
        SELECT BANK_NAME INTO IFSC2 FROM BANK_INFO_2611 WHERE IFSC_CODE IN(SELECT IFSC_CODE  FROM account_info_2611 WHERE ACCOUNT_NO=to_acc);
        IF(IFSC1=IFSC2)THEN
            DBMS_OUTPUT.PUT_LINE('DISCOUNT FOR  YOUR TRANSACTION ');
        END IF;

END;

--DIFFERENT
EXECUTE fund_transfe('1234567898765434','1234567898765433','500');
--SAME
EXECUTE fund_transfe('1234567898765432','1234567898765435','500');


--5. WRITE A BLOCK TO LIST THE SENIOR CITIZEN - ACCOUNT HOLDERS 
DECLARE
    CURSOR C1 IS 
        SELECT CUSTOMER_ID 
        FROM ACCOUNT_INFO_2611 WHERE TO_CHAR(ACTIVATION_DATE,'YYYY')+10<=TO_CHAR(SYSDATE,'YYYY') ;
    V_ID CUSTOMER_PERSONAL_INFO_2611.CUSTOMER_ID%TYPE;
BEGIN
    OPEN C1;
    LOOP
        FETCH C1 INTO V_ID;
        EXIT WHEN C1%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(V_ID);
    END LOOP;
   CLOSE C1;
END;

--select TO_CHAR(ACTIVATION_DATE,'YYYY') from ACCOUNT_INFO_2611;  
--select TO_CHAR(ACTIVATION_DATE,'YYYY')+10 from ACCOUNT_INFO_2611; 
--select TO_CHAR(SYSDATE,'YYYY') from ACCOUNT_INFO_2611;  
--SELECT * FROM ACCOUNT_INFO_2611 WHERE TO_CHAR(ACTIVATION_DATE,'YYYY')+10>=TO_CHAR(SYSDATE,'YYYY');

--6. WRITE A BLOCK TO CHANGE THE ACCOUNT HOLDERS BRANCH.(INCLUDING IFSC) FOR THE GIVEN ACCOUNT HOLDER
BEGIN
    UPDATE ACCOUNT_INFO_2611
    SET IFSC_CODE = 'ICITN0456'
    WHERE CUSTOMER_ID='&ID';
    IF SQL%FOUND THEN
        DBMS_OUTPUT.PUT_LINE('RECORD UPDATED');
    ELSE
        DBMS_OUTPUT.PUT_LINE('RECORD NOT FOUND');
    END IF;
END;


--7. WRITE A BLOCK TO CHECK THE ACCOUNT HOLDER NAME AND TO ADD THE NOMIEE NAME 
--FOR THE SENIOR CITIZEN - AFTER 10 YEARS OF ACCOUNT OPENING YEAR
--(EXTRACT SENIOR CITIZEN LIST,
--EXTRACT THE YEAR OF ACCOUNT OPENING,
--CREATE TABLE TO MAP NOMINEE NAME AND SENIOR CITIZEN PK,
--ADD THE NOMINEE NAME)

CREATE OR REPLACE PROCEDURE CUS(
    V_ID CUSTOMER_PERSONAL_INFO_2611.CUSTOMER_ID%TYPE,
    V_NAME VARCHAR
)
IS
    V_ID1 CUSTOMER_PERSONAL_INFO_2611.CUSTOMER_ID%TYPE;
    V_ID2 CUSTOMER_PERSONAL_INFO_2611.CUSTOMER_ID%TYPE;

BEGIN
        SELECT CUSTOMER_ID INTO V_ID2 FROM ACCOUNT_INFO_2611 WHERE CUSTOMER_ID=V_ID;
        SELECT CUSTOMER_ID INTO V_ID1
        FROM ACCOUNT_INFO_2611 WHERE TO_CHAR(ACTIVATION_DATE,'YYYY')+5<=TO_CHAR(SYSDATE,'YYYY') AND  CUSTOMER_ID=V_ID2;
        INSERT INTO NOMI VALUES(V_NAME,V_ID1);
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
            dbms_output.put_line('INVALID ACCOUNT NUMBER');

END;

EXECUTE CUS('C-001','JOHN');
CREATE TABLE NOMI
(
    NOMINEE VARCHAR(20),
    SENIOR VARCHAR2(5) ,
    CONSTRAINT PK1 PRIMARY KEY(SENIOR)
);
DROP TABLE NOMI;
SELECT * FROM NOMI;


--8. DISPLAY THE NAME OF THE EMPLOYEE AND THE NUMBER OF RECORDS USING CURSOR AND CURSOR LOOP
DECLARE
    CURSOR C1 IS 
        SELECT EMPLOYEE_ID id,FIRST_NAME 
        FROM employees_2611_ ;
    V_ID employees_2611_.EMPLOYEE_ID%TYPE;
    V_NAME employees_2611_.FIRST_NAME%TYPE;
    COUNT_EMP NUMBER(10):=0;
BEGIN
    OPEN C1;
    LOOP
        FETCH C1 INTO V_ID,V_NAME;
        EXIT WHEN C1%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(V_ID||' '||V_NAME);
        COUNT_EMP:=COUNT_EMP+1;
    END LOOP;
      DBMS_OUTPUT.PUT_LINE('NO OF ROWS IN THE TABLE = ' ||COUNT_EMP);
    CLOSE C1;
END;


--9. Write a procedure to increase the salary of all the employees by 5000 using FORALL.
CREATE or replace PROCEDURE adjust_salary33
(
    in_employee_id IN EMPLOYEES_2611_.EMPLOYEE_ID%TYPE
) IS
BEGIN
   UPDATE employees_2611_
   SET salary = salary +  5000
   WHERE employee_id = in_employee_id;
END;
--
--SELECT * FROM employees_2611_;
----24075
---- call procedure
--exec adjust_salary33(102);
---- after adjustment
--SELECT * FROM employees_2611_;

--BEGIN
--   UPDATE employees_2611_
--   SET salary = salary +  100
--   WHERE employee_id = '&id';
--END;

CREATE OR REPLACE PROCEDURE inc_salary_2611
IS
CURSOR CUR IS
SELECT EMPLOYEE_ID FROM EMPLOYEES_2611_;
TYPE emp_id_type IS TABLE OF EMPLOYEES_2611_.EMPLOYEE_ID%TYPE;
emp_id_list emp_id_type;
BEGIN
OPEN CUR;
FETCH CUR BULK COLLECT INTO emp_id_list;
FORALL indx IN emp_id_list.FIRST..emp_id_list.LAST
UPDATE EMPLOYEES_2611_ SET SALARY=SALARY+5000 WHERE EMPLOYEE_ID=emp_id_list(indx);
CLOSE CUR;
END;

EXECUTE inc_salary_2611;
SELECT * FROM EMPLOYEES_2611_;
