--CREATE A PROCEDURE TO DEPOSIT (USE TX TRIGGER TO ADD A TX ENTRY(CREDIT/DEBIT) LIKE AUDIT), WITHDRAW, FUND TRANSFER. 
--
--PROCEDURE SHOULD RETURN ERROR MESSAGE 
--	INVALID ACCOUNT NUMBER
--	ACCOUNT IS LOCKED (TX SHOULDNT HAPPEN)
--	THROW INSUFFIENT BALANCE EXPECTION.
--	MANAGE TX COMMIT AND ROLLBACK(IF ANY EXPECTION)

CREATE OR REPLACE TRIGGER Trans1
AFTER INSERT ON TRANSACTION32
FOR EACH ROW
BEGIN
    IF(:NEW.ACC_TYPE='WITHDRAW') THEN
        UPDATE account32 SET BALANCE=BALANCE-:NEW.AMOUNT WHERE ACC_NO=:NEW.ACC_NO;
    ELSIF (:NEW.ACC_TYPE='DEPOSIT') THEN
        UPDATE account32 SET BALANCE=BALANCE+:NEW.AMOUNT WHERE ACC_NO=:NEW.ACC_NO;
--    ELSIF (:NEW.ACC_TYPE='TRANSFER') THEN
--        UPDATE account32 SET BALANCE=BALANCE-:NEW.AMOUNT WHERE ACC_NO=:NEW.ACC_NO;
----        UPDATE account32 SET BALANCE=BALANCE+:NEW.AMOUNT WHERE ACC_NO=:NEW.TO_ACC;
     ELSE
          DBMS_OUTPUT.PUT_LINE('TYPE COULD BE WITHDRAW OR DEPOSIT');

END IF;
END;

INSERT INTO TRANSACTION3 VALUES('DEPOSIT',1000,500);
INSERT INTO TRANSACTION32 VALUES('WITHDRAW',1000,500);


--withdraw and deposit

CREATE OR REPLACE PROCEDURE ACC_TRANS
(
    in_acc_type TRANSACTION32.ACC_TYPE%TYPE,
    in_account_no TRANSACTION32.ACC_NO%TYPE,
    in_amount TRANSACTION32.AMOUNT%TYPE
)
IS
  L_STATUS ACCOUNT32.STATUS%TYPE;
  L_ACC_NO ACCOUNT32.ACC_NO%TYPE;
  L_ACC_balance ACCOUNT32.BALANCE%TYPE;
  E_INSUFFICIENT_BALANCE EXCEPTION;
  E_ACCOUNT_LOCKED EXCEPTION;
BEGIN
    SELECT STATUS,ACC_NO,BALANCE INTO L_STATUS,L_ACC_NO,L_ACC_balance FROM ACCOUNT32 WHERE ACC_NO=in_account_no;
     IF (L_STATUS='OPENED' AND in_acc_type='DEPOSIT'  )THEN
        INSERT INTO TRANSACTION32 (ACC_TYPE,ACC_NO,AMOUNT)VALUES(in_acc_type,in_account_no,in_amount);
        commit;
    ELSIF (L_STATUS='OPENED' AND in_acc_type='WITHDRAW' )THEN
        IF(L_ACC_balance >=in_amount) THEN
            INSERT INTO TRANSACTION32 (ACC_TYPE,ACC_NO,AMOUNT)VALUES(in_acc_type,in_account_no,in_amount);
            commit;
        ELSE
            RAISE E_INSUFFICIENT_BALANCE;
        END IF;
    ELSE
        RAISE E_ACCOUNT_LOCKED;
    END IF;
--exception
     EXCEPTION 
        WHEN E_INSUFFICIENT_BALANCE THEN 
            dbms_output.put_line('INSUFFICIENT_BALANCE');
        WHEN E_ACCOUNT_LOCKED THEN 
            dbms_output.put_line('ACCOUNT IS LOCKED');
        WHEN NO_DATA_FOUND THEN
            dbms_output.put_line('INVALID ACCOUNT NUMBER');
   
END;

--INSUFFIENT BALANCE
EXECUTE ACC_TRANS('WITHDRAW',1001,500);
--ACCOUNT IS LOCKED
EXECUTE ACC_TRANS('WITHDRAW',1002,500); 
EXECUTE ACC_TRANS('DEPOSIT',1002,500);
--INVALID ACCOUNT NUMBER
EXECUTE ACC_TRANS('WITHDRAW',124,500);
--SUCCESSFULLY WITHDRAW
EXECUTE ACC_TRANS('WITHDRAW',1000,500);
EXECUTE ACC_TRANS('DEPOSIT',1000,500);

CREATE TABLE TRANSACTION32
(
ACC_TYPE VARCHAR(10),
ACC_NO NUMBER(4),
AMOUNT NUMBER(10)
);
drop table TRANSACTION32;
SELECT * FROM TRANSACTION32;
select * from ACCOUNT32;

--------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE TRIGGER Trans
AFTER INSERT ON TRANSACTION3
FOR EACH ROW
BEGIN
    IF(:NEW.ACC_TYPE='WITHDRAW') THEN
        UPDATE account32 SET BALANCE=BALANCE-:NEW.AMOUNT WHERE ACC_NO=:NEW.ACC_NO;
    ELSIF (:NEW.ACC_TYPE='DEPOSIT') THEN
        UPDATE account32 SET BALANCE=BALANCE+:NEW.AMOUNT WHERE ACC_NO=:NEW.ACC_NO;
    ELSIF (:NEW.ACC_TYPE='TRANSFER') THEN
        UPDATE account32 SET BALANCE=BALANCE-:NEW.AMOUNT WHERE ACC_NO=:NEW.ACC_NO;
        UPDATE account32 SET BALANCE=BALANCE+:NEW.AMOUNT WHERE ACC_NO=:NEW.TO_ACC;
     ELSE
          DBMS_OUTPUT.PUT_LINE('TYPE COULD BE WITHDRAW OR DEPOSIT OR TRANSFER');

END IF;
END;

--withdraw , deposit AND FUND TRANSFER

CREATE OR REPLACE PROCEDURE ACC_TRANS1
(
    in_acc_type TRANSACTION3.ACC_TYPE%TYPE,
    in_account_no TRANSACTION3.ACC_NO%TYPE,
    in_amount TRANSACTION3.AMOUNT%TYPE,
    TO_ACC1 TRANSACTION3.ACC_NO%TYPE
)
IS
  L_STATUS ACCOUNT32.STATUS%TYPE;
  L_ACC_NO ACCOUNT32.ACC_NO%TYPE;
  L_ACC_balance ACCOUNT32.BALANCE%TYPE;
  E_INSUFFICIENT_BALANCE EXCEPTION;
  E_ACCOUNT_LOCKED EXCEPTION;
BEGIN
    SELECT STATUS,ACC_NO,BALANCE INTO L_STATUS,L_ACC_NO,L_ACC_balance FROM ACCOUNT32 WHERE ACC_NO=in_account_no;
     IF (L_STATUS='OPENED' AND in_acc_type='DEPOSIT'  )THEN
        INSERT INTO TRANSACTION3 (ACC_TYPE,ACC_NO,AMOUNT)VALUES(in_acc_type,in_account_no,in_amount);
        commit;
    ELSIF (L_STATUS='OPENED' AND in_acc_type='WITHDRAW' )THEN
        IF(L_ACC_balance >=in_amount) THEN
            INSERT INTO TRANSACTION3 (ACC_TYPE,ACC_NO,AMOUNT)VALUES(in_acc_type,in_account_no,in_amount);
            commit;
        ELSE
            RAISE E_INSUFFICIENT_BALANCE;
        END IF;
    ELSIF(L_STATUS='OPENED' AND in_acc_type='TRANSFER')THEN
        IF(L_ACC_balance >=in_amount) THEN
            INSERT INTO TRANSACTION3 VALUES(in_acc_type,in_account_no,TO_ACC1,in_amount);
            commit;
        ELSE
            RAISE E_INSUFFICIENT_BALANCE;
        end if;
    ELSE
        RAISE E_ACCOUNT_LOCKED;
    END IF;
--exception
     EXCEPTION 
        WHEN E_INSUFFICIENT_BALANCE THEN 
            dbms_output.put_line('INSUFFICIENT_BALANCE');
        WHEN E_ACCOUNT_LOCKED THEN 
            dbms_output.put_line('ACCOUNT IS LOCKED');
        WHEN NO_DATA_FOUND THEN
            dbms_output.put_line('INVALID ACCOUNT NUMBER');
   
END;

--INSUFFIENT BALANCE
EXECUTE ACC_TRANS1('WITHDRAW',1001,3000,'');
--ACCOUNT IS LOCKED
EXECUTE ACC_TRANS1('WITHDRAW',1002,500,''); 
EXECUTE ACC_TRANS1('DEPOSIT',1002,500,'');
--INVALID ACCOUNT NUMBER
EXECUTE ACC_TRANS1('WITHDRAW',124,500,'');
--SUCCESSFULLY WITHDRAW
EXECUTE ACC_TRANS1('WITHDRAW',1000,22,'');
EXECUTE ACC_TRANS1('DEPOSIT',1000,22,'');

--TRANSFER SUCCESS
EXECUTE ACC_TRANS1('TRANSFER',1000,500,1001); 
-- INSUFFIENT BALANCE
EXECUTE ACC_TRANS1('TRANSFER',1001,5000,1000); 

CREATE TABLE ACCOUNT32
(
ACC_NO NUMBER(4),
CUST_NAME VARCHAR2(20),
BALANCE NUMBER(10),
STATUS VARCHAR2(10)
);
drop table ACCOUNT32;
SELECT * FROM ACCOUNT32;
INSERT INTO ACCOUNT32 VALUES(1000,'PRINCY',23000,'OPENED');
INSERT INTO ACCOUNT32 VALUES(1001,'PRIYA',5000,'OPENED');
INSERT INTO ACCOUNT32 VALUES(1002,'ANAND',10000,'CLOSED');

CREATE TABLE TRANSACTION3
(
ACC_TYPE VARCHAR(10),
ACC_NO NUMBER(4),
to_acc number(4),
AMOUNT NUMBER(10)
);
drop table TRANSACTION3;
SELECT * FROM TRANSACTION3;
DELETE FROM TRANSACTION3;
